
// Generated from NeoBasicLexer.g4 by ANTLR 4.13.2

#pragma once


#include "antlr4-runtime.h"


namespace parser {


class  NeoBasicLexer : public antlr4::Lexer {
public:
  enum {
    LEFT_PARENTHESIS = 1, RIGHT_PARENTHESIS = 2, LEFT_BRACKET = 3, RIGHT_BRACKET = 4, 
    LEFT_CURLY = 5, RIGHT_CURLY = 6, LEFT_ANGLE = 7, RIGHT_ANGLE = 8, DOT = 9, 
    COMMA = 10, SEMICOLON = 11, COLON = 12, EXCLAMATION = 13, QUESTION = 14, 
    APOSTROPHE = 15, QUOTE = 16, BACKTICK = 17, AT = 18, HASH = 19, DOLLAR = 20, 
    AMPERSAND = 21, ASTERISK = 22, SLASH = 23, DIVISION = 24, PERCENT = 25, 
    BACKSLASH = 26, TILDE = 27, CARET = 28, PIPE = 29, UNDERSCORE = 30, 
    EQUAL = 31, PLUS = 32, MINUS = 33, POSITIVE = 34, NEGATIVE = 35, INCREMENT = 36, 
    DECREMENT = 37, BIT_NOT = 38, BIT_NEGATION = 39, SQUARE_POWER = 40, 
    SQUARE_ROOT = 41, FACTORIAL = 42, ADDITION = 43, SUBTRACTION = 44, MULTIPLICATION = 45, 
    REAL_DIVISION = 46, INTEGER_DIVISION = 47, MODULO = 48, NTH_POWER = 49, 
    NTH_ROOT = 50, PERCENTAGE_RATE = 51, PERCENTAGE_AMOUNT = 52, PERCENTAGE_INCREASE = 53, 
    PERCENTAGE_DECREASE = 54, PERCENTAGE_VARIATION = 55, BIT_AND = 56, BIT_CLEAR = 57, 
    BIT_XOR = 58, BIT_OR = 59, LEFT_SHIFT = 60, SIGNED_RIGHT_SHIFT = 61, 
    UNSIGNED_RIGHT_SHIFT = 62, IDENTITY = 63, NOT_IDENTITY = 64, MEMBERSHIP = 65, 
    NOT_MEMBERSHIP = 66, BETWEEN_RANGE = 67, NOT_BETWEEN_RANGE = 68, MATCHING = 69, 
    NOT_MATCHING = 70, DIVISIBLE_BY = 71, NOT_DIVISIBLE_BY = 72, ELVIS_TEST = 73, 
    THREE_WAY_TEST = 74, EQUALS = 75, NOT_EQUALS = 76, LESS = 77, LESS_OR_EQUALS = 78, 
    GREATER = 79, GREATER_OR_EQUALS = 80, LOGICAL_AND = 81, LOGICAL_XOR = 82, 
    LOGICAL_OR = 83, LOGICAL_NOT = 84, LOGICAL_NAND = 85, LOGICAL_NXOR = 86, 
    LOGICAL_NOR = 87, ERROR_PROPAGATION = 88, ERROR_COALESCING = 89, ERROR_PROPAGATION_NONE_COALESCING = 90, 
    ERROR_TO_NONE_CONVERTION = 91, EXCEPTION_COALESCING = 92, EXCEPTION_STATEMENT = 93, 
    BASIC_ASSIGNMENT = 94, DESTRUCTURING_ASSIGNMENT = 95, MACRO_ASSIGNMENT = 96, 
    ADDITION_ASSIGNMENT = 97, SUBTRACTION_ASSIGNMENT = 98, MULTIPLICATION_ASSIGNMENT = 99, 
    REAL_DIVISION_ASSIGNMENT = 100, INTEGER_DIVISION_ASSIGNMENT = 101, MODULO_ASSIGNMENT = 102, 
    NTH_POWER_ASSIGNMENT = 103, NTH_ROOT_ASSIGNMENT = 104, PERCENTAGE_RATE_ASSIGNMENT = 105, 
    PERCENTAGE_AMOUNT_ASSIGNMENT = 106, PERCENTAGE_INCREASE_ASSIGNMENT = 107, 
    PERCENTAGE_DECREASE_ASSIGNMENT = 108, PERCENTAGE_VARIATION_ASSIGNMENT = 109, 
    BIT_AND_ASSIGNMENT = 110, BIT_OR_ASSIGNMENT = 111, BIT_XOR_ASSIGNMENT = 112, 
    BIT_CLEAR_ASSIGNMENT = 113, BIT_NOT_ASSIGNMENT = 114, LEFT_SHIFT_ASSIGNMENT = 115, 
    SIGNED_RIGHT_SHIFT_ASSIGNMENT = 116, UNSIGNED_RIGHT_SHIFT_ASSIGNMENT = 117, 
    NONE_COALESCING_ASSIGNMENT = 118, INTERVAL = 119, ELLIPSIS = 120, FRACTION = 121, 
    IMPLICIT_RETURN = 122, MONAD_BIND = 123, NUMBER_LIT = 124, TIME_LIT = 125, 
    SEQUENCE_LIT = 126, HEREDOC_LITERAL = 127, HEREDOC_CONTENT = 128, BINARY_LIT = 129, 
    REGULAR_EXPRESSION_LIT = 130, REGULAR_EXPRESSION_CONTENT = 131, STRING_LIT = 132, 
    VERBATIM_STRING_LIT = 133, TEMPLATE_STRING_LIT = 134, STRING_PLACEHOLDER = 135, 
    CHAR_LIT = 136, ASCII_LIT = 137, ATOM_DOT_LIT = 138, DOT_FRACTION = 139, 
    RANGE_LIT = 140, KEYWORD = 141, IDENTIFIER = 142, ATOM_IDENTIFIER = 143, 
    MUSIC_NOTE = 144, MUSIC_ALPHABET = 145, OCTAVE_DIGIT = 146, PITCH_FLAT = 147, 
    PITCH_SHARP = 148, SHEBANG = 149, SHEBANG_INTERPRETER = 150, WOODSTOCK = 151, 
    RUBBERDUCK = 152, TRACERBIRD = 153, LOGGING_LEVEL = 154, HASHTAG = 155, 
    EOS = 156, EOL = 157, BOM = 158, UTF8_BOM = 159, UTF16_BOM = 160, UTF32_BOM = 161, 
    WSP = 162, EXPLICIT_LINE_JOINING = 163, LINE_COMMENT = 164, BLOCK_COMMENT = 165, 
    DOCUMENTATION_COMMENT = 166, UnexpectedCharacter = 167, CONST = 168, 
    VAL = 169, VAR = 170, IF = 171, THEN = 172, UNLESS = 173, ORELSE = 174, 
    THIS = 175, IOTA = 176, ALL = 177, ANY = 178, ONE = 179, TWO = 180, 
    NIL = 181, TYPEOF = 182, INSTANCEOF = 183, SIZEOF = 184, IS = 185, IN = 186, 
    BETWEEN = 187, LIKE = 188, NOT = 189, AND = 190, OR = 191, XOR = 192, 
    NAND = 193, NOR = 194, NXOR = 195, ATOM = 196, AUTO = 197, VOID = 198, 
    BOOL8 = 199, BOOL16 = 200, BOOL32 = 201, BOOL64 = 202, BOOL128 = 203, 
    BOOL = 204, DIG = 205, BIT = 206, OCT = 207, HEX = 208, NIBBLE = 209, 
    BYTE = 210, NUMBER = 211, NAT8 = 212, NAT16 = 213, NAT32 = 214, NAT64 = 215, 
    NAT128 = 216, NAT = 217, BIGNAT = 218, INT8 = 219, INT16 = 220, INT32 = 221, 
    INT64 = 222, INT128 = 223, INT = 224, BIGINT = 225, REAL16 = 226, REAL32 = 227, 
    REAL64 = 228, REAL128 = 229, REAL = 230, BIGREAL = 231, DEC1 = 232, 
    DEC2 = 233, DEC3 = 234, DEC4 = 235, DEC5 = 236, DEC6 = 237, DEC7 = 238, 
    DEC8 = 239, DECIMAL = 240, MONEY = 241, BIGDECIMAL = 242, RATIO8 = 243, 
    RATIO16 = 244, RATIO32 = 245, RATIO64 = 246, RATIO128 = 247, RATIO = 248, 
    COMPLEX16 = 249, COMPLEX32 = 250, COMPLEX64 = 251, COMPLEX128 = 252, 
    COMPLEX = 253, QUATERN16 = 254, QUATERN32 = 255, QUATERN64 = 256, QUATERN128 = 257, 
    QUATERN = 258, DATE = 259, ELAPSE = 260, ASCII = 261, CHAR8 = 262, CHAR16 = 263, 
    CHAR32 = 264, CHAR = 265, STR = 266, STRING8 = 267, STRING16 = 268, 
    STRING32 = 269, STRING = 270, REGEX = 271, BINARY = 272, RANGE = 273, 
    TRUE = 274, FALSE = 275, NONZERO = 276, ZERO = 277, MINVALUE = 278, 
    MAXVALUE = 279, NAN = 280, POSITIVEINFINITY = 281, NEGATIVEINFINITY = 282, 
    LOCALDATE = 283, LOCALDATETIME = 284, OFFSETDATE = 285, OFFSETDATETIME = 286, 
    ZONEDDATE = 287, ZONEDDATETIME = 288, TOMORROW = 289, TODAY = 290, NOW = 291, 
    YESTERDAY = 292, EON = 293, EPOCH = 294, LETTER = 295, MARK = 296, DIGIT = 297, 
    PUNCTUATION = 298, SYMBOL = 299, SEPARATOR = 300, NONPRINTABLE = 301, 
    NULL_ = 302, BLANK = 303, NONBLANK = 304, OKAY = 305, FAIL = 306, SOME = 307, 
    NONE = 308, YEA = 309, NAY = 310, DATA = 311, EOT = 312, SCAN = 313, 
    ECHO = 314, TILL = 315, SINCE = 316, PLAY = 317, CLS = 318, CD = 319, 
    PWD = 320, LS = 321, MKDIR = 322, RMDIR = 323, TOUCH = 324, RM = 325, 
    CP = 326, MV = 327, RENAME = 328, CHMOD = 329, CHOWN = 330, CHGRP = 331, 
    RAISE = 332, PANIC = 333, TRACE = 334, DEBUG = 335, INFO = 336, WARN = 337, 
    ERROR = 338, FATAL = 339
  };

  enum {
    ERROR_CHANNEL = 2
  };

  explicit NeoBasicLexer(antlr4::CharStream *input);

  ~NeoBasicLexer() override;


  std::string getGrammarFileName() const override;

  const std::vector<std::string>& getRuleNames() const override;

  const std::vector<std::string>& getChannelNames() const override;

  const std::vector<std::string>& getModeNames() const override;

  const antlr4::dfa::Vocabulary& getVocabulary() const override;

  antlr4::atn::SerializedATNView getSerializedATN() const override;

  const antlr4::atn::ATN& getATN() const override;

  // By default the static state used to implement the lexer is lazily initialized during the first
  // call to the constructor. You can call this function if you wish to initialize the static state
  // ahead of time.
  static void initialize();

private:

  // Individual action functions triggered by action() above.

  // Individual semantic predicate functions triggered by sempred() above.

};

}  // namespace parser
