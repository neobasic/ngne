
// Generated from NeoBasicLexer.g4 by ANTLR 4.13.2

#pragma once


#include "antlr4-runtime.h"


namespace parser {


class  NeoBasicLexer : public NeoBasicLexerBase {
public:
  enum {
    LEFT_PARENTHESIS = 1, RIGHT_PARENTHESIS = 2, LEFT_BRACKET = 3, RIGHT_BRACKET = 4, 
    LEFT_CURLY = 5, RIGHT_CURLY = 6, LEFT_ANGLE = 7, RIGHT_ANGLE = 8, DOT = 9, 
    COMMA = 10, SEMICOLON = 11, COLON = 12, EXCLAMATION = 13, QUESTION = 14, 
    APOSTROPHE = 15, QUOTE = 16, BACKTICK = 17, AT = 18, HASH = 19, DOLLAR = 20, 
    AMPERSAND = 21, ASTERISK = 22, SLASH = 23, DIVISION = 24, PERCENT = 25, 
    BACKSLASH = 26, TILDE = 27, CARET = 28, PIPE = 29, UNDERSCORE = 30, 
    EQUAL = 31, PLUS = 32, MINUS = 33, ELLIPSIS = 34, LAMBDA = 35, DOUBLE_LEFT_BRACKET = 36, 
    DOUBLE_RIGHT_BRACKET = 37, DOUBLE_LEFT_CURLY = 38, DOUBLE_RIGHT_CURLY = 39, 
    DOUBLE_LEFT_ANGLE = 40, DOUBLE_RIGHT_ANGLE = 41, DOUBLE_EXCLAMATION = 42, 
    DOUBLE_QUESTION = 43, DOUBLE_COLON = 44, DOUBLE_SEMICOLON = 45, SPECIAL_ASSIGNMENT = 46, 
    INCREMENT = 47, DECREMENT = 48, SQUARE_POWER = 49, SQUARE_ROOT = 50, 
    FACTORIAL = 51, BIT_NEGATION = 52, DEEP_CLONING = 53, SORTING = 54, 
    QUOTIENT = 55, PERCENTAGE_RATE = 56, PERCENTAGE_AMOUNT = 57, PERCENTAGE_INCREASE = 58, 
    PERCENTAGE_DECREASE = 59, PERCENTAGE_VARIATION = 60, BIT_CLEAR = 61, 
    UNSIGNED_RIGHT_SHIFT = 62, DIVISIBLE_BY = 63, NOT_DIVISIBLE_BY = 64, 
    ELVIS_TEST = 65, THREE_WAY_TEST = 66, STRICT_EQUALITY = 67, STRICT_INEQUALITY = 68, 
    LOOSE_EQUALITY = 69, LOOSE_INEQUALITY = 70, LESS_OR_EQUALS = 71, GREATER_OR_EQUALS = 72, 
    ERROR_PROPAGATION_NONE_COALESCING = 73, POP_ONE_ASSIGNMENT = 74, PULL_ALL_ASSIGNMENT = 75, 
    PIPE_ASSIGNMENT = 76, DESTRUCTURING_ASSIGNMENT = 77, ADDITION_ASSIGNMENT = 78, 
    SUBTRACTION_ASSIGNMENT = 79, MULTIPLICATION_ASSIGNMENT = 80, REAL_DIVISION_ASSIGNMENT = 81, 
    INTEGER_DIVISION_ASSIGNMENT = 82, QUOTIENT_ASSIGNMENT = 83, MODULO_ASSIGNMENT = 84, 
    NTH_POWER_ASSIGNMENT = 85, NTH_ROOT_ASSIGNMENT = 86, PERCENTAGE_RATE_ASSIGNMENT = 87, 
    PERCENTAGE_AMOUNT_ASSIGNMENT = 88, PERCENTAGE_INCREASE_ASSIGNMENT = 89, 
    PERCENTAGE_DECREASE_ASSIGNMENT = 90, PERCENTAGE_VARIATION_ASSIGNMENT = 91, 
    BIT_AND_ASSIGNMENT = 92, BIT_OR_ASSIGNMENT = 93, BIT_XOR_ASSIGNMENT = 94, 
    BIT_CLEAR_ASSIGNMENT = 95, LEFT_SHIFT_ASSIGNMENT = 96, SIGNED_RIGHT_SHIFT_ASSIGNMENT = 97, 
    UNSIGNED_RIGHT_SHIFT_ASSIGNMENT = 98, NONE_COALESCING_ASSIGNMENT = 99, 
    INTERVAL_INCLUSIVE = 100, INTERVAL_LEFT_EXCLUSIVE = 101, INTERVAL_RIGHT_EXCLUSIVE = 102, 
    INTERVAL_EXCLUSIVE = 103, INTERVAL = 104, INTERVAL_LEFT = 105, INTERVAL_RIGHT = 106, 
    MIXIN = 107, EXTENDS = 108, NECK_RULE = 109, ONELINER_SUITE = 110, MONAD_BIND = 111, 
    PIPELINE = 112, COMMAND_SEQUENCE = 113, COMMAND_SEQUENCE_OKAY = 114, 
    COMMAND_SEQUENCE_FAIL = 115, COMMAND_BACKGROUND = 116, OUTPUT_REDIRECTION = 117, 
    APPEND_OUTPUT_REDIRECTION = 118, STDOUT_REDIRECTION = 119, APPEND_STDOUT_REDIRECTION = 120, 
    STDERR_REDIRECTION = 121, APPEND_STDERR_REDIRECTION = 122, DEC_LIT = 123, 
    DECIMAL_NUMBER = 124, REAL_LIT = 125, REAL_NUMBER = 126, RATIO_LIT = 127, 
    RATIONAL_NUMBER = 128, IMAGINARY_LIT = 129, IMAGINARY_NUMBER = 130, 
    NATURAL_LIT = 131, INTEGER_LIT = 132, INTEGER_NUMBER = 133, BINARY_LIT = 134, 
    HEREDOC_LITERAL = 135, HEREDOC_CONTENT = 136, REGULAR_EXPRESSION_LIT = 137, 
    REGULAR_EXPRESSION_CONTENT = 138, STRING_LIT = 139, STRING_PREFIX = 140, 
    WSTRING_LIT = 141, STRING_SEQUENCE = 142, VERBATIM_STRING = 143, TEMPLATE_STRING = 144, 
    PLACEHOLDER_VALUE = 145, CHAR_LIT = 146, WCHAR_LIT = 147, WCHAR_PREFIX = 148, 
    UNICODE_CHAR = 149, ASCII_LIT = 150, ASCII_PREFIX = 151, ASCII_CHAR = 152, 
    ATOM_DOT_LIT = 153, DOT_FRACTION = 154, SHELL_LIT = 155, SHELL_PATH_LIT = 156, 
    FILESYSTEM_PATH = 157, ABSOLUTE_PATH = 158, RELATIVE_PATH = 159, TILDE_PATH = 160, 
    PATH_NAME = 161, FILE_NAME = 162, DRIVE_LETTER = 163, TAG = 164, IDENTIFIER = 165, 
    ATOM_IDENTIFIER = 166, ASPECT_IDENTIFIER = 167, SHELL_IDENTIFIER = 168, 
    MUSIC_NOTE = 169, MUSIC_ALPHABET = 170, OCTAVE_DIGIT = 171, PITCH_FLAT = 172, 
    PITCH_SHARP = 173, SHEBANG = 174, WOODSTOCK = 175, SHERLOCK = 176, RUBBERDUCK = 177, 
    SONGBIRD = 178, LINE_COMMENT = 179, BLOCK_COMMENT = 180, CELL_COMMENT = 181, 
    HASHTAG = 182, EOS = 183, EOL = 184, BOM = 185, UTF8_BOM = 186, UTF16_BOM = 187, 
    UTF32_BOM = 188, WSP = 189, UnexpectedCharacter = 190, MODULE = 191, 
    ALGORITHM = 192, NOTABENE = 193, USE = 194, AS = 195, OF = 196, INCLUDE = 197, 
    INTERFACE = 198, EXTERN = 199, RPROC = 200, FOREIGN = 201, CONST = 202, 
    VAL = 203, VAR = 204, FUNC = 205, FEED = 206, FMAP = 207, SUB = 208, 
    TYPE = 209, DIM = 210, FACT = 211, ENUM = 212, STRUCT = 213, PROTO = 214, 
    TRAIT = 215, CLASS = 216, GET = 217, SET = 218, OPER = 219, EVENT = 220, 
    DEF = 221, DEFN = 222, UNDEF = 223, PUBLIC = 224, PROTECTED = 225, PRIVATE = 226, 
    LINEAR = 227, SHARED = 228, VOLATILE = 229, LOCAL = 230, ATOMIC = 231, 
    STATIC = 232, COMPTIME = 233, MUTABLE = 234, TRANSIENT = 235, INLINE = 236, 
    VIEW = 237, SYNCHRO = 238, VIRTUAL = 239, OVERRIDE = 240, FINAL = 241, 
    OFF = 242, ASYNC = 243, ABSTRACT = 244, SEALED = 245, SINGLETON = 246, 
    RECORD = 247, MONAD = 248, MEASURE = 249, INFIX = 250, EXPLICIT = 251, 
    DEFER = 252, WITH = 253, DO = 254, IF = 255, THEN = 256, ELIF = 257, 
    ELSE = 258, UNLESS = 259, OTHERWISE = 260, MATCH = 261, CASE = 262, 
    FALLTHROUGH = 263, TRY = 264, CATCH = 265, LOOP = 266, UPTO = 267, FOR = 268, 
    EACH = 269, STEP = 270, WHILE = 271, UNTIL = 272, REDO = 273, NEXT = 274, 
    BREAK = 275, RETURN = 276, YIELD = 277, GO = 278, TO = 279, AWAIT = 280, 
    SWITCH = 281, WHEN = 282, DEFAULT = 283, CONTINUE = 284, BEGIN = 285, 
    FINALLY = 286, INVAR = 287, THIS = 288, IOTA = 289, NTH = 290, TOP = 291, 
    END = 292, IT = 293, SELF = 294, SUPER = 295, PARENT = 296, ALL = 297, 
    ANY = 298, ONE = 299, TWO = 300, NIL = 301, LET = 302, OWN = 303, MUT = 304, 
    TYPEOF = 305, INSTANCEOF = 306, SIZEOF = 307, IS = 308, IN = 309, BETWEEN = 310, 
    LIKE = 311, NOT = 312, AND = 313, OR = 314, XOR = 315, NAND = 316, NOR = 317, 
    NXOR = 318, NEW = 319, DEL = 320, ATOM = 321, AUTO = 322, VOID = 323, 
    BOOL8 = 324, BOOL16 = 325, BOOL32 = 326, BOOL64 = 327, BOOL128 = 328, 
    BOOL = 329, DIG = 330, BIT = 331, OCT = 332, HEX = 333, ROMAN = 334, 
    NIBBLE = 335, BYTE = 336, NUMBER = 337, NAT8 = 338, NAT16 = 339, NAT32 = 340, 
    NAT64 = 341, NAT128 = 342, NAT = 343, BIGNAT = 344, INT8 = 345, INT16 = 346, 
    INT32 = 347, INT64 = 348, INT128 = 349, INT = 350, BIGINT = 351, REAL16 = 352, 
    REAL32 = 353, REAL64 = 354, REAL128 = 355, REAL = 356, BIGREAL = 357, 
    DEC1 = 358, DEC2 = 359, DEC3 = 360, DEC4 = 361, DEC5 = 362, DEC6 = 363, 
    DEC7 = 364, DEC8 = 365, DECIMAL = 366, MONEY = 367, BIGDECIMAL = 368, 
    RATIO8 = 369, RATIO16 = 370, RATIO32 = 371, RATIO64 = 372, RATIO128 = 373, 
    RATIO = 374, COMPLEX16 = 375, COMPLEX32 = 376, COMPLEX64 = 377, COMPLEX128 = 378, 
    COMPLEX = 379, QUATERN16 = 380, QUATERN32 = 381, QUATERN64 = 382, QUATERN128 = 383, 
    QUATERN = 384, DATE = 385, ELAPSE = 386, ASCII = 387, CHAR8 = 388, CHAR16 = 389, 
    CHAR32 = 390, CHAR = 391, WCHAR = 392, ANSI = 393, STR8 = 394, STR16 = 395, 
    STR32 = 396, STR = 397, CSTR = 398, WSTR = 399, REGEX = 400, BINARY = 401, 
    PATH = 402, URI = 403, INET = 404, RANGE = 405, PAIR = 406, TUPLE = 407, 
    ARRAY = 408, LIST = 409, DICT = 410, CHAN = 411, VEC = 412, MAT = 413, 
    TSET = 414, QUEUE = 415, DEQUE = 416, XML = 417, TABLE = 418, MEMO = 419, 
    TRUE = 420, FALSE = 421, NONZERO = 422, ZERO = 423, MINVALUE = 424, 
    MAXVALUE = 425, NAN = 426, POSITIVEINFINITY = 427, NEGATIVEINFINITY = 428, 
    LOCALDATE = 429, LOCALDATETIME = 430, OFFSETDATE = 431, OFFSETDATETIME = 432, 
    ZONEDDATE = 433, ZONEDDATETIME = 434, TOMORROW = 435, TODAY = 436, NOW = 437, 
    YESTERDAY = 438, EON = 439, EPOCH = 440, LETTER = 441, MARK = 442, DIGIT = 443, 
    PUNCTUATION = 444, SYMBOL = 445, SEPARATOR = 446, NONPRINTABLE = 447, 
    NULL_ = 448, BLANK = 449, NONBLANK = 450, FOLDER = 451, FILE = 452, 
    LINKLINKFILE = 453, PIPEFILE = 454, SOCKETFILE = 455, BLOCKDEVICE = 456, 
    CHARDEVICE = 457, NULLDEVICE = 458, URL = 459, URN = 460, IPV4 = 461, 
    IPV6 = 462, OKAY = 463, FAIL = 464, SOME = 465, NONE = 466, YEA = 467, 
    NAY = 468, DATA = 469, EOT = 470, SCAN = 471, ECHO = 472, ALERT = 473, 
    ENTRY = 474, TILL = 475, SINCE = 476, TIMELY = 477, CANCEL = 478, PLAY = 479, 
    CLS = 480, CD = 481, PWD = 482, LS = 483, MKDIR = 484, RMDIR = 485, 
    TOUCH = 486, RM = 487, CP = 488, MV = 489, RENAME = 490, CHMOD = 491, 
    CHOWN = 492, CHGRP = 493, RAISE = 494, PANIC = 495, UNIT = 496, FROM = 497, 
    ONCE = 498, TDATA = 499, CALL = 500, HIDE = 501, SHOW = 502, INTO = 503, 
    PASS = 504, PAST = 505, TFAIL = 506, TRACE = 507, DEBUG = 508, INFO = 509, 
    WARN = 510, ERROR = 511, FATAL = 512
  };

  enum {
    COMMENT = 2, ERROR_CHANNEL = 3
  };

  explicit NeoBasicLexer(antlr4::CharStream *input);

  ~NeoBasicLexer() override;


  std::string getGrammarFileName() const override;

  const std::vector<std::string>& getRuleNames() const override;

  const std::vector<std::string>& getChannelNames() const override;

  const std::vector<std::string>& getModeNames() const override;

  const antlr4::dfa::Vocabulary& getVocabulary() const override;

  antlr4::atn::SerializedATNView getSerializedATN() const override;

  const antlr4::atn::ATN& getATN() const override;

  // By default the static state used to implement the lexer is lazily initialized during the first
  // call to the constructor. You can call this function if you wish to initialize the static state
  // ahead of time.
  static void initialize();

private:

  // Individual action functions triggered by action() above.

  // Individual semantic predicate functions triggered by sempred() above.

};

}  // namespace parser
